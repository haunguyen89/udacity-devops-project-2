Description: HauNCT - Udagram - Udacity DevOps Engineer Project 2.

Parameters:
  # Add your parameters here
  ProjectName:
    Type: String
    Default: haunctp02
  VpcId:
    Type: String
  PrivateSubnetIds:
    Type: String
  PublicSubnetIds:
    Type: String
  AMIId:
    Type: String
    Default: ami-07caf09b362be10b8
  InstanceType:
    Type: String
    Default: t2.medium
  S3BucketName:
    Type: String
    Default: haunctp02
  StaticSource:
    Type: String
    Default: index.html

Resources:
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group
      GroupName: !Sub ${ProjectName}-SecurityGroup
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        
  ### The EC2 Lauch config to be used by autoscaaling group ###
  WebAppLaunchConfig:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: WebAppLaunchConfig
      LaunchTemplateData:
        IamInstanceProfile: 
          Arn: 
            Fn::Sub: "arn:aws:iam::074694946076:instance-profile/haunguyen"
        ImageId: !Ref AMIId
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: '10'
              VolumeType: gp2
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              sudo su
              apt update
              sudo apt install apache2 -y
              systemctl start apache2
              systemctl enable apache2
              snap install aws-cli --classic
              cd /var/www/html
              aws s3 cp s3://${S3BucketName}/index.html ./


  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: AutoScalingGroup
      LaunchTemplate: 
        LaunchTemplateId: !Ref WebAppLaunchConfig
        Version: !GetAtt WebAppLaunchConfig.LatestVersionNumber
      MaxSize: '4'
      MinSize: '1'
      DesiredCapacity: '2'
      TargetGroupARNs:
        - !GetAtt WebAppTargetGroup.TargetGroupArn
      VPCZoneIdentifier: !Split 
        - ","
        - !Ref PrivateSubnetIds

  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub ${ProjectName}-WebAppLoadBalancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref EC2SecurityGroup
      Subnets: !Split 
        - ","
        - !Ref PublicSubnetIds
      Type: application

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VpcId
      HealthCheckEnabled: true

  WebAppListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !GetAtt WebAppTargetGroup.TargetGroupArn
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: 80
      Protocol: HTTP

### Security Group used for Load balancer ###
  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group WebAppSecurityGroup
      GroupName: !Sub ${ProjectName}-WebAppSecurityGroup
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
Outputs:
  ALBUrl:
    Value: !GetAtt WebAppLoadBalancer.DNSName
    